# Generated from Funx.g by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,32,190,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,1,0,1,
        0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,
        6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,4,9,95,8,9,11,9,12,
        9,96,1,9,1,9,5,9,101,8,9,10,9,12,9,104,9,9,1,10,4,10,107,8,10,11,
        10,12,10,108,1,11,4,11,112,8,11,11,11,12,11,113,1,11,5,11,117,8,
        11,10,11,12,11,120,9,11,1,12,4,12,123,8,12,11,12,12,12,124,1,12,
        5,12,128,8,12,10,12,12,12,131,9,12,1,13,1,13,1,13,1,14,1,14,1,14,
        1,15,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,19,
        1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,
        1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,30,1,30,5,30,
        177,8,30,10,30,12,30,180,9,30,1,30,1,30,1,31,4,31,185,8,31,11,31,
        12,31,186,1,31,1,31,0,0,32,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
        9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
        20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,
        31,63,32,1,0,6,1,0,48,57,1,0,65,90,4,0,48,57,65,90,95,95,97,122,
        1,0,97,122,2,0,10,10,13,13,3,0,10,10,13,13,32,32,198,0,1,1,0,0,0,
        0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
        1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
        1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
        1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
        1,0,0,0,1,65,1,0,0,0,3,67,1,0,0,0,5,69,1,0,0,0,7,71,1,0,0,0,9,73,
        1,0,0,0,11,75,1,0,0,0,13,78,1,0,0,0,15,83,1,0,0,0,17,89,1,0,0,0,
        19,94,1,0,0,0,21,106,1,0,0,0,23,111,1,0,0,0,25,122,1,0,0,0,27,132,
        1,0,0,0,29,135,1,0,0,0,31,138,1,0,0,0,33,141,1,0,0,0,35,143,1,0,
        0,0,37,146,1,0,0,0,39,148,1,0,0,0,41,151,1,0,0,0,43,154,1,0,0,0,
        45,156,1,0,0,0,47,158,1,0,0,0,49,160,1,0,0,0,51,162,1,0,0,0,53,164,
        1,0,0,0,55,166,1,0,0,0,57,169,1,0,0,0,59,171,1,0,0,0,61,174,1,0,
        0,0,63,184,1,0,0,0,65,66,5,123,0,0,66,2,1,0,0,0,67,68,5,125,0,0,
        68,4,1,0,0,0,69,70,5,40,0,0,70,6,1,0,0,0,71,72,5,41,0,0,72,8,1,0,
        0,0,73,74,5,59,0,0,74,10,1,0,0,0,75,76,5,105,0,0,76,77,5,102,0,0,
        77,12,1,0,0,0,78,79,5,101,0,0,79,80,5,108,0,0,80,81,5,115,0,0,81,
        82,5,101,0,0,82,14,1,0,0,0,83,84,5,119,0,0,84,85,5,104,0,0,85,86,
        5,105,0,0,86,87,5,108,0,0,87,88,5,101,0,0,88,16,1,0,0,0,89,90,5,
        102,0,0,90,91,5,111,0,0,91,92,5,114,0,0,92,18,1,0,0,0,93,95,3,21,
        10,0,94,93,1,0,0,0,95,96,1,0,0,0,96,94,1,0,0,0,96,97,1,0,0,0,97,
        98,1,0,0,0,98,102,5,46,0,0,99,101,3,21,10,0,100,99,1,0,0,0,101,104,
        1,0,0,0,102,100,1,0,0,0,102,103,1,0,0,0,103,20,1,0,0,0,104,102,1,
        0,0,0,105,107,7,0,0,0,106,105,1,0,0,0,107,108,1,0,0,0,108,106,1,
        0,0,0,108,109,1,0,0,0,109,22,1,0,0,0,110,112,7,1,0,0,111,110,1,0,
        0,0,112,113,1,0,0,0,113,111,1,0,0,0,113,114,1,0,0,0,114,118,1,0,
        0,0,115,117,7,2,0,0,116,115,1,0,0,0,117,120,1,0,0,0,118,116,1,0,
        0,0,118,119,1,0,0,0,119,24,1,0,0,0,120,118,1,0,0,0,121,123,7,3,0,
        0,122,121,1,0,0,0,123,124,1,0,0,0,124,122,1,0,0,0,124,125,1,0,0,
        0,125,129,1,0,0,0,126,128,7,2,0,0,127,126,1,0,0,0,128,131,1,0,0,
        0,129,127,1,0,0,0,129,130,1,0,0,0,130,26,1,0,0,0,131,129,1,0,0,0,
        132,133,5,38,0,0,133,134,5,38,0,0,134,28,1,0,0,0,135,136,5,124,0,
        0,136,137,5,124,0,0,137,30,1,0,0,0,138,139,5,124,0,0,139,140,5,38,
        0,0,140,32,1,0,0,0,141,142,5,33,0,0,142,34,1,0,0,0,143,144,5,33,
        0,0,144,145,5,61,0,0,145,36,1,0,0,0,146,147,5,61,0,0,147,38,1,0,
        0,0,148,149,5,62,0,0,149,150,5,61,0,0,150,40,1,0,0,0,151,152,5,60,
        0,0,152,153,5,61,0,0,153,42,1,0,0,0,154,155,5,62,0,0,155,44,1,0,
        0,0,156,157,5,60,0,0,157,46,1,0,0,0,158,159,5,43,0,0,159,48,1,0,
        0,0,160,161,5,42,0,0,161,50,1,0,0,0,162,163,5,45,0,0,163,52,1,0,
        0,0,164,165,5,47,0,0,165,54,1,0,0,0,166,167,5,42,0,0,167,168,5,42,
        0,0,168,56,1,0,0,0,169,170,5,37,0,0,170,58,1,0,0,0,171,172,5,60,
        0,0,172,173,5,45,0,0,173,60,1,0,0,0,174,178,5,35,0,0,175,177,8,4,
        0,0,176,175,1,0,0,0,177,180,1,0,0,0,178,176,1,0,0,0,178,179,1,0,
        0,0,179,181,1,0,0,0,180,178,1,0,0,0,181,182,6,30,0,0,182,62,1,0,
        0,0,183,185,7,5,0,0,184,183,1,0,0,0,185,186,1,0,0,0,186,184,1,0,
        0,0,186,187,1,0,0,0,187,188,1,0,0,0,188,189,6,31,0,0,189,64,1,0,
        0,0,10,0,96,102,108,113,118,124,129,178,186,1,6,0,0
    ]

class FunxLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    IF = 6
    ELSE = 7
    WHILE = 8
    FOR = 9
    FLOAT = 10
    INT = 11
    TXTFUN = 12
    TXT = 13
    AND = 14
    OR = 15
    XOR = 16
    NOT = 17
    DIF = 18
    EQ = 19
    MAJEQ = 20
    MENEQ = 21
    MAJ = 22
    MEN = 23
    MES = 24
    MULT = 25
    REST = 26
    DIV = 27
    POW = 28
    MOD = 29
    ASSIG = 30
    COMMENT = 31
    WS = 32

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'{'", "'}'", "'('", "')'", "';'", "'if'", "'else'", "'while'", 
            "'for'", "'&&'", "'||'", "'|&'", "'!'", "'!='", "'='", "'>='", 
            "'<='", "'>'", "'<'", "'+'", "'*'", "'-'", "'/'", "'**'", "'%'", 
            "'<-'" ]

    symbolicNames = [ "<INVALID>",
            "IF", "ELSE", "WHILE", "FOR", "FLOAT", "INT", "TXTFUN", "TXT", 
            "AND", "OR", "XOR", "NOT", "DIF", "EQ", "MAJEQ", "MENEQ", "MAJ", 
            "MEN", "MES", "MULT", "REST", "DIV", "POW", "MOD", "ASSIG", 
            "COMMENT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "IF", "ELSE", 
                  "WHILE", "FOR", "FLOAT", "INT", "TXTFUN", "TXT", "AND", 
                  "OR", "XOR", "NOT", "DIF", "EQ", "MAJEQ", "MENEQ", "MAJ", 
                  "MEN", "MES", "MULT", "REST", "DIV", "POW", "MOD", "ASSIG", 
                  "COMMENT", "WS" ]

    grammarFileName = "Funx.g"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


