# Generated from Funx.g by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,30,180,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,1,0,1,0,1,1,1,1,1,2,1,2,1,
        3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,
        7,4,7,85,8,7,11,7,12,7,86,1,7,1,7,5,7,91,8,7,10,7,12,7,94,9,7,1,
        8,4,8,97,8,8,11,8,12,8,98,1,9,4,9,102,8,9,11,9,12,9,103,1,9,5,9,
        107,8,9,10,9,12,9,110,9,9,1,10,4,10,113,8,10,11,10,12,10,114,1,10,
        5,10,118,8,10,10,10,12,10,121,9,10,1,11,1,11,1,11,1,12,1,12,1,12,
        1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,17,1,17,1,17,
        1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,
        1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,28,1,28,5,28,
        167,8,28,10,28,12,28,170,9,28,1,28,1,28,1,29,4,29,175,8,29,11,29,
        12,29,176,1,29,1,29,0,0,30,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
        9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
        20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,1,
        0,6,1,0,48,57,1,0,65,90,4,0,48,57,65,90,95,95,97,122,1,0,97,122,
        2,0,10,10,13,13,3,0,10,10,13,13,32,32,188,0,1,1,0,0,0,0,3,1,0,0,
        0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,
        0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,
        0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,
        0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,
        0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,
        0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,1,61,1,0,0,0,3,63,1,0,0,0,
        5,65,1,0,0,0,7,67,1,0,0,0,9,69,1,0,0,0,11,72,1,0,0,0,13,77,1,0,0,
        0,15,84,1,0,0,0,17,96,1,0,0,0,19,101,1,0,0,0,21,112,1,0,0,0,23,122,
        1,0,0,0,25,125,1,0,0,0,27,128,1,0,0,0,29,131,1,0,0,0,31,133,1,0,
        0,0,33,136,1,0,0,0,35,138,1,0,0,0,37,141,1,0,0,0,39,144,1,0,0,0,
        41,146,1,0,0,0,43,148,1,0,0,0,45,150,1,0,0,0,47,152,1,0,0,0,49,154,
        1,0,0,0,51,156,1,0,0,0,53,159,1,0,0,0,55,161,1,0,0,0,57,164,1,0,
        0,0,59,174,1,0,0,0,61,62,5,123,0,0,62,2,1,0,0,0,63,64,5,125,0,0,
        64,4,1,0,0,0,65,66,5,40,0,0,66,6,1,0,0,0,67,68,5,41,0,0,68,8,1,0,
        0,0,69,70,5,105,0,0,70,71,5,102,0,0,71,10,1,0,0,0,72,73,5,101,0,
        0,73,74,5,108,0,0,74,75,5,115,0,0,75,76,5,101,0,0,76,12,1,0,0,0,
        77,78,5,119,0,0,78,79,5,104,0,0,79,80,5,105,0,0,80,81,5,108,0,0,
        81,82,5,101,0,0,82,14,1,0,0,0,83,85,3,17,8,0,84,83,1,0,0,0,85,86,
        1,0,0,0,86,84,1,0,0,0,86,87,1,0,0,0,87,88,1,0,0,0,88,92,5,46,0,0,
        89,91,3,17,8,0,90,89,1,0,0,0,91,94,1,0,0,0,92,90,1,0,0,0,92,93,1,
        0,0,0,93,16,1,0,0,0,94,92,1,0,0,0,95,97,7,0,0,0,96,95,1,0,0,0,97,
        98,1,0,0,0,98,96,1,0,0,0,98,99,1,0,0,0,99,18,1,0,0,0,100,102,7,1,
        0,0,101,100,1,0,0,0,102,103,1,0,0,0,103,101,1,0,0,0,103,104,1,0,
        0,0,104,108,1,0,0,0,105,107,7,2,0,0,106,105,1,0,0,0,107,110,1,0,
        0,0,108,106,1,0,0,0,108,109,1,0,0,0,109,20,1,0,0,0,110,108,1,0,0,
        0,111,113,7,3,0,0,112,111,1,0,0,0,113,114,1,0,0,0,114,112,1,0,0,
        0,114,115,1,0,0,0,115,119,1,0,0,0,116,118,7,2,0,0,117,116,1,0,0,
        0,118,121,1,0,0,0,119,117,1,0,0,0,119,120,1,0,0,0,120,22,1,0,0,0,
        121,119,1,0,0,0,122,123,5,38,0,0,123,124,5,38,0,0,124,24,1,0,0,0,
        125,126,5,124,0,0,126,127,5,124,0,0,127,26,1,0,0,0,128,129,5,124,
        0,0,129,130,5,38,0,0,130,28,1,0,0,0,131,132,5,33,0,0,132,30,1,0,
        0,0,133,134,5,33,0,0,134,135,5,61,0,0,135,32,1,0,0,0,136,137,5,61,
        0,0,137,34,1,0,0,0,138,139,5,62,0,0,139,140,5,61,0,0,140,36,1,0,
        0,0,141,142,5,60,0,0,142,143,5,61,0,0,143,38,1,0,0,0,144,145,5,62,
        0,0,145,40,1,0,0,0,146,147,5,60,0,0,147,42,1,0,0,0,148,149,5,43,
        0,0,149,44,1,0,0,0,150,151,5,42,0,0,151,46,1,0,0,0,152,153,5,45,
        0,0,153,48,1,0,0,0,154,155,5,47,0,0,155,50,1,0,0,0,156,157,5,42,
        0,0,157,158,5,42,0,0,158,52,1,0,0,0,159,160,5,37,0,0,160,54,1,0,
        0,0,161,162,5,60,0,0,162,163,5,45,0,0,163,56,1,0,0,0,164,168,5,35,
        0,0,165,167,8,4,0,0,166,165,1,0,0,0,167,170,1,0,0,0,168,166,1,0,
        0,0,168,169,1,0,0,0,169,171,1,0,0,0,170,168,1,0,0,0,171,172,6,28,
        0,0,172,58,1,0,0,0,173,175,7,5,0,0,174,173,1,0,0,0,175,176,1,0,0,
        0,176,174,1,0,0,0,176,177,1,0,0,0,177,178,1,0,0,0,178,179,6,29,0,
        0,179,60,1,0,0,0,10,0,86,92,98,103,108,114,119,168,176,1,6,0,0
    ]

class FunxLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    IF = 5
    ELSE = 6
    WHILE = 7
    FLOAT = 8
    INT = 9
    TXTFUN = 10
    TXT = 11
    AND = 12
    OR = 13
    XOR = 14
    NOT = 15
    DIF = 16
    EQ = 17
    MAJEQ = 18
    MENEQ = 19
    MAJ = 20
    MEN = 21
    MES = 22
    MULT = 23
    REST = 24
    DIV = 25
    POW = 26
    MOD = 27
    ASSIG = 28
    COMMENT = 29
    WS = 30

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'{'", "'}'", "'('", "')'", "'if'", "'else'", "'while'", "'&&'", 
            "'||'", "'|&'", "'!'", "'!='", "'='", "'>='", "'<='", "'>'", 
            "'<'", "'+'", "'*'", "'-'", "'/'", "'**'", "'%'", "'<-'" ]

    symbolicNames = [ "<INVALID>",
            "IF", "ELSE", "WHILE", "FLOAT", "INT", "TXTFUN", "TXT", "AND", 
            "OR", "XOR", "NOT", "DIF", "EQ", "MAJEQ", "MENEQ", "MAJ", "MEN", 
            "MES", "MULT", "REST", "DIV", "POW", "MOD", "ASSIG", "COMMENT", 
            "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "IF", "ELSE", "WHILE", 
                  "FLOAT", "INT", "TXTFUN", "TXT", "AND", "OR", "XOR", "NOT", 
                  "DIF", "EQ", "MAJEQ", "MENEQ", "MAJ", "MEN", "MES", "MULT", 
                  "REST", "DIV", "POW", "MOD", "ASSIG", "COMMENT", "WS" ]

    grammarFileName = "Funx.g"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


